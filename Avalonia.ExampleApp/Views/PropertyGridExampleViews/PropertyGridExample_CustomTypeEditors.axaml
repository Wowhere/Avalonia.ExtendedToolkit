<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:tk="https://github.com/avalonia_extendedtoolkit"
             xmlns:Model="clr-namespace:Avalonia.ExampleApp.Model;assembly=Avalonia.ExampleApp"
             xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
             xmlns:Converter="clr-namespace:Avalonia.ExampleApp.Converters;assembly=Avalonia.ExampleApp"
             xmlns:pgConverter="clr-namespace:Avalonia.ExtendedToolkit.Controls.PropertyGrid.Converters;assembly=Avalonia.ExtendedToolkit"
             xmlns:Controls="clr-namespace:Avalonia.Controlz.Controls;assembly=Avalonia.Controlz"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
             x:Class="Avalonia.ExampleApp.Views.PropertyGridExample_CustomTypeEditors">
  <UserControl.Resources>
    <Model:FontList x:Key="FontFamilyList"/>
    <Model:FontSizeList x:Key="FontSizeList"/>
    <Model:XmlLanguageList x:Key="XmlLanguageList"/>


    <Converter:FontStyleConverter x:Key="FontStyleConverter"/>
    <Converter:FontWeightConverter x:Key="FontWeightConverter"/>
    <Converter:EmptyValueConverter x:Key="emptyValueConverter"/>
    <Converter:DefaultPercentConverter x:Key="DefaultPercentConverter"/>

    <pgConverter:EnumValueConverter x:Key="EnumValueConverter"/>
    <pgConverter:ExpanderHeaderWidthConverter x:Key="expanderHeaderWidthConverter"/>

    <ControlTemplate x:Key="PercentEditorKey">
      <Grid>
        <TextBox x:Name="Editor"
                 Text="{Binding PropertyValue.Value, Converter={StaticResource DefaultPercentConverter}
                 ,FallbackValue={x:Static sys:String.Empty}}"
                 />
      </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static Model:LocalResources.XmlLanguageEditorKey}">
      <ComboBox
      x:Name="PART_editor"
      SelectedItem="{Binding PropertyValue.Value}"
      ItemsSource="{Binding Source={StaticResource XmlLanguageList}}"
      IsEnabled="{Binding IsEditable}"
      />
    </ControlTemplate>

    <ControlTemplate x:Key="{x:Static Model:LocalResources.FileBrowserEditorKey}">
      <Grid>
        <Grid.ColumnDefinitions>
          <ColumnDefinition/>
          <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <TextBox Grid.Column="0" MinWidth="20" Text="{Binding PropertyValue.StringValue}" IsReadOnly="True"
                 />

        <Button Grid.Column="1" Margin="2,0,0,0" Content="..." Width="20"
              Command="{Binding ElementName=propertyGrid, Path=ShowDialogEditorCommand}"
              CommandParameter="{Binding PropertyValue}"
              IsVisible="{Binding PropertyValue.IsEditable}"
              />
      </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="MyDateEditorInlineTemplate">
      <DatePicker SelectedDate="{Binding PropertyValue.Value, Mode=TwoWay}"/>
    </ControlTemplate>

    <ControlTemplate x:Key="MyPointInlineEditorTemplate">
      <StackPanel Background="{DynamicResource MahApps.Brushes.Accent3}">
        <Expander DataContext="{Binding PropertyValue}"
                  
                >
          <Expander.Header>
            <!--somehow the value is not updating if slider changed (?)-->
            <TextBlock x:Name="PART_editor"
                   Text="{Binding Path=Value, Mode=OneWay}"
                   Width="{Binding RelativeSource={RelativeSource Mode=FindAncestor, 
                 AncestorType={x:Type Expander}}, Mode=OneWay, Path=Width, 
                 Converter={StaticResource expanderHeaderWidthConverter}, ConverterParameter=-30}"/>
          </Expander.Header>
          <StackPanel Margin="5">
            <!--Style="{DynamicResource {x:Type Slider}}"
          ToolTip="X property"
            -->
            <Model:PointEditor
                               EditValue="{Binding Path=Value, Converter={StaticResource emptyValueConverter}}"
                               DisplayMember="X"
                               Minimum="0" Maximum="1" TickFrequency="0.1"
                               AutoToolTipPrecision="2" />
            <!--Style="{DynamicResource {x:Type Slider}}"
          ToolTip="Y property"
          -->
            <Model:PointEditor
                             EditValue="{Binding Path=Value, Converter={StaticResource emptyValueConverter}}"
                             DisplayMember="Y"
                             Minimum="0" Maximum="1" TickFrequency="0.1"
                             AutoToolTipPrecision="2" />
          </StackPanel>
        </Expander>
      </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="MyCustomExtendedTemplate_Inline">
      <Grid Margin="1">
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="1*"/>
          <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <TextBox Grid.Column="0" Text="{Binding PropertyValue.StringValue, Mode=TwoWay}"
                 IsReadOnly="{Binding IsReadOnly}"/>
        <Button Grid.Column="1" Margin="4,0,0,0" Content="[...]" Width="25"
                Command="{Binding ElementName=tabbedLayout, 
                Path=ShowExtendedEditorCommand}"
                CommandParameter="{Binding PropertyValue}"/>
      </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="MyCustomExtendedTemplate_Extended">
      <Grid>
        <Grid.RowDefinitions>
          <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <TextBox Grid.Row="0" Text="{Binding PropertyValue.StringValue, Mode=TwoWay}"
                 IsReadOnly="{Binding PropertyValue.IsReadOnly}" TextWrapping="Wrap"/>
      </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="TextCategoryEditor">
      <StackPanel Margin="5">
        <Grid>
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="Auto"/>
          </Grid.ColumnDefinitions>
          <ComboBox
                    Grid.Column="0"
                    Margin="2"
                    ItemsSource="{Binding Source={StaticResource FontFamilyList}}"
                    SelectedItem="{Binding [FontFamily].PropertyValue.Value}"/>
          <!--DisplayMemberPath="FamilyNames.Values[0]"-->
          <ComboBox
                    Grid.Column="1"
                    Margin="2"
                    ItemsSource="{Binding Source={StaticResource FontSizeList}}"
                    SelectedItem="{Binding [FontSize].PropertyValue.Value}"/>
        </Grid>
        <StackPanel Orientation="Horizontal">
          <CheckBox
                    Margin="2"
                    Content="Bold"
                    IsChecked="{Binding Path=[FontWeight].PropertyValue.Value, 
                    Converter={StaticResource FontWeightConverter}}"/>
          <CheckBox
                    Margin="2"
                    Content="Italic"
                    IsChecked="{Binding Path=[FontStyle].PropertyValue.Value, 
                    Converter={StaticResource FontStyleConverter}}"/>
        </StackPanel>
      </StackPanel>
    </ControlTemplate>

  </UserControl.Resources>
  <UserControl.Styles>
    <Style Selector="TextBlock">
      <Setter Property="VerticalAlignment" Value="Center"/>
      <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Black}"/>
    </Style>


    <Style Selector="Model|PointEditor">
      <Setter Property="Template">
        <Setter.Value>
          <ControlTemplate>
            <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Height="24"
                  Background="{DynamicResource ThemeBackgroundBrush}"
                  Margin="2"
                  >
              <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*"/>
                <ColumnDefinition Width="*"/>
              </Grid.ColumnDefinitions>

              <TextBlock Grid.Row="0" Text="{TemplateBinding DisplayMember, 
                         Converter={StaticResource EnumValueConverter}, Mode=OneWay}"
                         Foreground="{DynamicResource MahApps.Brushes.Black}"
                         />

              <Controls:SliderEx
                Grid.Column="1"
                Value="{TemplateBinding Value}"
                Minimum="{TemplateBinding Minimum}"
                Maximum="{TemplateBinding Maximum}"
                TickFrequency="{TemplateBinding TickFrequency}"
                IsEnabled="{TemplateBinding IsEnabled}"
                IsDirectionReversed="{TemplateBinding IsDirectionReversed}"
                IsMoveToPointEnabled="{TemplateBinding IsMoveToPointEnabled}"
                IsSnapToTickEnabled="{TemplateBinding IsSnapToTickEnabled}"
                AutoToolTipPlacement="{TemplateBinding AutoToolTipPlacement}"
                AutoToolTipPrecision="{TemplateBinding AutoToolTipPrecision}"
                />
              <!---->


            </Grid>

          </ControlTemplate>
        </Setter.Value>

      </Setter>

    </Style>

  </UserControl.Styles>
  <Grid>
    <Grid.ColumnDefinitions>
      <ColumnDefinition />
      <ColumnDefinition />
    </Grid.ColumnDefinitions>

    <StackPanel x:Name="objectPanel" Grid.Column="0" Margin="0,10,10,0">
      <TextBlock Text="This sample demonstrates the possibilities of specifying custom type editors based on dialogs."/>

      <Button x:Name="btnTest" Margin="5,5,5,0" Content="Toggle 'Login' Visibility" Width="200"/>
      <CheckBox x:Name="toggleGrid" Margin="5,5,5,0" Content="Toggle Properties" IsChecked="True"/>
      <CheckBox x:Name="toggleSearchBox" Margin="5,5,5,0" Content="Toggle Search Box" IsChecked="True" IsVisible="{Binding ElementName=toggleGrid, Path=IsChecked, Mode=OneWay}"/>
      <Button x:Name="btnSwitchObjects" Margin="5,5,5,0" Content="Select Single" />
      <Button x:Name="btnSelectMultiple" Margin="5,5,5,0" Content="Select Multiple"/>
    </StackPanel>

    <!--<GridSplitter Width="2" />-->

    <tk:PropertyGrid x:Name="propertyGrid"
                     Grid.Column="1"
                     PropertyDisplayMode="All"
                     Background="Transparent"
                     ShowAttachedProperties="False"
                     ShowReadOnlyProperties="False"
                     PropertyFilterIsVisible="{Binding ElementName=toggleSearchBox, Path=IsChecked, Mode=TwoWay}"
                     IsVisible="{Binding ElementName=toggleGrid, Path=IsChecked, Mode=TwoWay}"
                     Height="450"
                     >

      <tk:PropertyGrid.Editors>

        <tk:TypeEditor EditedType="{x:Type sys:DateTime}"
                       InlineTemplate="{StaticResource MyDateEditorInlineTemplate}"/>
        <tk:TypeEditor EditedType="{x:Type Point}"
                       InlineTemplate="{StaticResource MyPointInlineEditorTemplate}"/>

        <!--<tk:TypeEditor EditedType="{x:Type markup:XmlLanguage}" InlineTemplate="{x:Static local:LocalResources.XmlLanguageEditorKey}"/>-->

        <tk:PropertyEditor DeclaringType="{x:Type Model:BusinessObject}"
                           PropertyName="Percentage"
                           InlineTemplate="{StaticResource PercentEditorKey}"/>

        <tk:PropertyEditor DeclaringType="{x:Type Model:BusinessObject}"
                           PropertyName="Name"
                           InlineTemplate="{StaticResource MyCustomExtendedTemplate_Inline}"
                           ExtendedTemplate="{StaticResource MyCustomExtendedTemplate_Extended}"/>
        <tk:PropertyEditor DeclaringType="{x:Type Model:BusinessObject}"
                           PropertyName="Range"
                           InlineTemplate="{StaticResource {x:Static tk:EditorKeys.SliderEditorKey}}"/>
        <tk:PropertyEditor DeclaringType="{x:Type Model:BusinessObject}"
                           PropertyName="Password"
                           InlineTemplate="{StaticResource {x:Static tk:EditorKeys.PasswordEditorKey}}"/>
        <tk:PropertyEditor DeclaringType="{x:Type Model:BusinessObject}"
                           PropertyName="DoubleBlend"
                           InlineTemplate="{StaticResource {x:Static tk:EditorKeys.DoubleEditorKey}}"/>

        <tk:CategoryEditor DeclaringType="{x:Type Model:BusinessObject}"
                           CategoryName="Text"
                           InlineTemplate="{StaticResource TextCategoryEditor}"/>

      </tk:PropertyGrid.Editors>

      <tk:PropertyGrid.Layout>
        <!-- USE DEFAULT ALPHABETICAL LAYOUT -->
        <!--<tk:AlphabeticalLayout/>-->

        <!-- USE DEFAULT CATEGORIZED LAYOUT -->
        <!--<tk:CategorizedLayout/>-->

        <!-- #1 USE DEFAULT TABBED LAYOUT -->
        <tk:TabbedLayout x:Name="tabbedLayout">

          <!-- #1.1: Default layout usage -->
          <tk:TabbedLayoutItem Header="Categorized" CanClose="True">
            <!--CanClose="true"-->
            <tk:CategorizedLayout />
          </tk:TabbedLayoutItem>
          <tk:TabbedLayoutItem  Header="Alphabetical">
            <!--CanClose="true"-->
            <tk:AlphabeticalLayout />
          </tk:TabbedLayoutItem>


          <!-- #1.2: Alternative layout usage (any Control being powered by attached properties) -->
          <!--<tk:CategorizedLayout tk:TabbedLayout.CanClose="False" tk:TabbedLayout.Header="Categorized"/>
          <tk:AlphabeticalLayout tk:TabbedLayout.CanClose="False" tk:TabbedLayout.Header="Alphabetical"/>-->

        </tk:TabbedLayout>

        <!-- #2 USE CUSTOM TABBED LAYOUT. EACH CATEGORY GOES TO A SEPARATE TAB -->
        <!--
        <tk:TabbedLayout Items="{Binding Categories}" ItemHeaderProperty="CategoryName">
          <tk:TabbedLayout.Resources>
            <DataTemplate DataType="{x:Type tk:CategoryItem}">
              <tk:PropertyItemsLayout Items="{Binding Properties}"/>
            </DataTemplate>
          </tk:TabbedLayout.Resources>
        </tk:TabbedLayout>
        -->
      </tk:PropertyGrid.Layout>


    </tk:PropertyGrid>




  </Grid>



</UserControl>
